addjob {
plugin org.drftpd.plugins.jobmanager
class JobManagerCommandHandler
method doADDJOB
perms =siteop
help Add a job to the JobManager queue.
help.specific ${command} <file> <priority> <timestomirror> <destslave> [destslave ...]
help.specific <file> : The file to archive
help.specific <priority> : The priority you want this job to have. Must be an Integer.
help.specific <timestomirror> : The max number of slaves each file should be on.
help.specific <destslave> : The name of the slave to transfer the files to.
input public
output source
}

listjobs {
plugin org.drftpd.plugins.jobmanager
class JobManagerCommandHandler
method doLISTJOBS
perms =siteop
help List the current jobs queued by the JobManager.
help.specific List the current jobs queued by the JobManager by index #
input public
output source
}

listrunningjobs {
plugin org.drftpd.plugins.jobmanager
class JobManagerCommandHandler
method doLISTRUNNINGJOBS
perms =siteop
help List the current jobs queued by the JobManager.
help.specific List the current jobs queued by the JobManager by index #
input public
output source
}

removejob {
plugin org.drftpd.plugins.jobmanager
class JobManagerCommandHandler
method doREMOVEJOB
perms =siteop
help Removes a Job from the JobManager queue by index # or range.
help.specific ${command} <jobindex> <lowrange>-<highrange> will remove the job with
help.specific jobindex and all jobs including and between lowrange and highrange.
help.specific You can use as many ranges as your heart desires.
input public
output source
}

removejobs {
plugin org.drftpd.plugins.jobmanager
class JobManagerCommandHandler
method doREMOVEJOBS
perms =siteop
help Removes all jobs that are not currently transferring.
help.specific Removes all jobs that are not currently transferring.
input public
output source
}

startjobs {
plugin org.drftpd.plugins.jobmanager
class JobManagerCommandHandler
method doSTARTJOBS
perms =siteop
help Starts running the jobs in the JobManager queue.
help.specific Starts running the jobs in the JobManager queue.
input public
output source
}

stopjobs {
plugin org.drftpd.plugins.jobmanager
class JobManagerCommandHandler
method doSTOPJOBS
perms =siteop
help Stops running the jobs in the JobManager queue.
help.specific Stops running the jobs in the JobManager queue.
input public
output source
}

# $Id$
addip {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_ADDIP
perms =gadmin =siteop
help Add a new mask to a user
help.specific ${command} <username> <ident@ip>
input all
output source
}

adduser {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_ADDUSER
perms =gadmin =siteop
help Add a new user
help.specific ${command} <user> <password> [<ident@ip#1> ...]
input all
output source
}

addgroup {
plugin org.drftpd.commands.usermanagement
class GroupManagementHandler
method doSITE_ADDGROUP
perms =siteop
help Add a new group
help.specific ${command} <group>
input all
output source
}

changeuser {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_CHANGEUSER
perms =gadmin =siteop
help Change parameters for a user
help.specific ${command} <username> <field> <value>
help.specific Valid fields: group, created, ratio, idle_time, credits, tagline
help.specific num_logins # [opt perIP], comment, wkly_allotment, max_sim #dn #up
input all
output source
}

changegroup {
plugin org.drftpd.commands.usermanagement
class GroupManagementHandler
method doSITE_CHANGEGROUP
perms =siteop
help Change parameters for a group
help.specific ${command} <groupname> <field> <value>
help.specific Valid fields: created, slots, leechslots
input all
output source
}

changegroupadmin {
plugin org.drftpd.commands.usermanagement
class GroupManagementHandler
method doSITE_CHANGEGROUPADMIN
perms =siteop
help Add/Remove users as group admin from a group
help.specific ${command} <group> <user> [<user> ...]
input all
output source
}

chgrp {
plugin org.drftpd.commands.usermanagement
class GroupManagementHandler
method doSITE_CHGRP
perms =siteop
help Change secondary groups for a user
help.specific ${command} <user> <group> [<group> ...]
input all
output source
}

chpass {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_CHPASS
perms =gadmin =siteop
help Change password for a user
help.specific ${command} <user> <password>
input all
output source
}

delip {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_DELIP
perms =gadmin =siteop
help Remove a mask from a user
help.specific ${command} <user> <ident@ip> ...
input all
output source
}

deluser {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_DELUSER
perms =gadmin =siteop
help Delete a user
help.specific ${command} <user> [reason]
input all
output source
}

delgroup {
plugin org.drftpd.commands.usermanagement
class GroupManagementHandler
method doSITE_DELGROUP
perms =gadmin =siteop
help Delete a group
help.specific ${command} <group>
input all
output source
}

gadduser {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_GADDUSER
perms =siteop
help Add a new user to the specified group
help.specific ${command} <group> <user> <password> [<ident@ip#1 ..]
input all
output source
}

ginfo {
plugin org.drftpd.commands.usermanagement
class GroupManagementHandler
method doSITE_GINFO
perms =gadmin =siteop
help Show information on a group
help.specific ${command} <group>
input all
output source
}

give {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_GIVE
perms =siteop
help Give a user credits
help.specific ${command} <user> <bytes>
input all
output source
}

groups {
plugin org.drftpd.commands.usermanagement
class GroupManagementHandler
method doSITE_GROUPS
perms =siteop
help Lists the groups on the site
input all
output source
}

grpren {
plugin org.drftpd.commands.usermanagement
class GroupManagementHandler
method doSITE_GRPREN
perms =siteop
help Rename a group
help.specific ${command} <oldgroup> <newgroup>
input all
output source
}

kick {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_KICK
perms =siteop
help Kick a users current connections to the site
help.specific ${command} <user> [message]
input all
output source
}

kickall {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_KICKALL
perms =siteop
help Kick all users current connections to the site
help.specific ${command} [message]
input all
output source
}

purge {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_PURGE
perms =gadmin =siteop
help Permanently remove a user from the site
help.specific ${command} <username>
input all
output source
}

delpurge {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_DELPURGE
perms =gadmin =siteop
help Permanently remove a user from the site
help.specific ${command} <username>
input all
output source
}

readd {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_READD
perms =gadmin =siteop
help Readd a deleted user
help.specific ${command} <user>
input all
output source
}

renuser {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_RENUSER
perms =siteop
help Rename a user
help.specific ${command} <old_username> <new_username>
input all
output source
}

seen {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_SEEN
perms *
help Show when a user last connected
help.specific ${command} <user>
input all
output source
}

tagline {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_TAGLINE
perms *
help Change your tagline
help.specific ${command} <tagline>
input all
output source
}

swap {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_SWAP
perms =siteop
help Swap Credits Between Users
help.specific ${command} <srcuser> <destuser> <bytes>
input all
output source
}

take {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_TAKE
perms =siteop
help Remove credits from a user
help.specific ${command} <user> <bytes>
input all
output source
}

user {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_USER
perms *
help Show details for a user
help.specific ${command} <user>
input all
output source
}

users {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_USERS
perms =siteop
help List all usernames added to the site
input all
output source
}

ban {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_BAN
perms =ban =siteop
help Ban a user from logging onto the site for a specified amount of time.
help.specific ${command} <user> <minutes> [reason]
input all
output source
}

banall {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_BANALL
perms =ban =siteop
help Ban all users from logging onto the site for a specified amount of time.
help.specific ${command} <minutes> [reason]
input all
output source
}

unban {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_UNBAN
perms =ban =siteop
help Removes a ban for the specified user.
help.specific ${command} <user>
input all
output source
}

unbanall {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_UNBANALL
perms =ban =siteop
help Removes ban from all users.
help.specific ${command}
input all
output source
}

bans {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_BANS
perms =ban =siteop
help List the current users banned on the site.
input all
output source
}

# $Id$
rebuildindex {
plugin org.drftpd.commands.indexmanager
class IndexManager
method doRebuildIndex
perms =siteop
input all
output source
}

indexstatus {
plugin org.drftpd.commands.indexmanager
class IndexManager
method doIndexStatus
perms =siteop
input all
output source
}

setexpire {
plugin org.drftpd.commands.usermanagement.expireduser
class ExpiredUser
method doSITE_SETEXPIRE
perms =siteop
help Sets expiry date for User <yyyy-MM-dd>
help.specific ${command} <username> <expiry-date>
input all
output source
}

removeexpire {
plugin org.drftpd.commands.usermanagement.expireduser
class ExpiredUser
method doSITE_REMOVEEXPIRE
perms =siteop
help Removes expiry date for User
help.specific ${command} <username>
input all
output source
}

addnote {
plugin org.drftpd.commands.usermanagement.notes
class Notes
method doSITE_ADDNOTE
perms =siteop
help Add's Note For User
help.specific ${command} <username> <note>
input all
output source
}

delnote {
plugin org.drftpd.commands.usermanagement.notes
class Notes
method doSITE_DELNOTE
perms =siteop
help Removes Note For User
help.specific ${command} <username> <noteID>
input all
output source
}

# $Id$
## Largely follows the same conventions as ftpcommands.conf
# Additional parameters required for irc are input and output
# input: A space separated list of places this command can be used
#        valid options are channel names and any of the special identifiers below
#        public: all channels the bot is in
#        private: private message to the bot
#        all: all channels and private message, ie any source
#
# output: A space separated list of places to send the commands output
#         valid options are channel names and any of the special identifiers below
#         public: all channels the bot is in
#         private: private message to the user who initiated the command
#         source: reply to where the command originated, be it a channel or private message

# Do not let PluginsConfig parse this file.
skip=true

who {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSITE_WHO
perms =siteop
help Show who's online
input all
output source
}

leechers {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doLeechers
perms *
help Show who's downloading
input all
output source
}

idlers {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doIdlers
perms *
help Show who's idling
input all
output source
}

uploaders {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doUploaders
perms *
help Show who's uploading
input all
output source
}

slave {
plugin org.drftpd.commands.slavemanagement
class SlaveManagement
method doSlave
perms =siteop
help Display a slaves status
help.specific ${command} <slavename> <more>
input all
output source
}

slaves {
plugin org.drftpd.commands.slavemanagement
class SlaveManagement
method doSITE_SLAVES
perms =siteop
help List the status of all slaves
input all
output source
}

bw {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doBW
perms %
help Show total bandwidth use
input all
output source
}

speed {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doSpeed
perms %
help Show the state of the specified users connections
input all
output source
}

df {
plugin org.drftpd.commands.slavemanagement
class SlaveManagement
method doDiskfree
perms *
help Displays current free space
input all
output source
}

ident {
plugin org.drftpd.plugins.sitebot
class commands.UserHandler
method doIdent
perms %
help Associates an irc nick with a ftp user
input private
output source
}

unident {
plugin org.drftpd.plugins.sitebot
class commands.UserHandler
method doUNIdent
perms *
help Associates an irc nick with a ftp user
input private
output source
}

bnc {
plugin org.drftpd.commands.textoutput
class Textoutput
method doTEXT_OUTPUT
perms *
help Displays the site bnc details
file userdata/text/bnc.txt
input public
output source
}

affils {
plugin org.drftpd.commands.textoutput
class Textoutput
method doTEXT_OUTPUT
perms *
help Displays the site affils
file userdata/text/affils.txt
input public
output source
}

alup {
plugin org.drftpd.commands.transferstatistics
class TransferStatistics
method doSITE_ALUP
perms *
help Lists the top uploaders of all time
input all
output source
}

aldn {
plugin org.drftpd.commands.transferstatistics
class TransferStatistics
method doSITE_ALDN
perms *
help Lists the top downloaders of all time
input all
output source
}

monthup {
plugin org.drftpd.commands.transferstatistics
class TransferStatistics
method doSITE_MONTHUP
perms *
help Lists the top uploaders this month
input all
output source
}

monthdn {
plugin org.drftpd.commands.transferstatistics
class TransferStatistics
method doSITE_MONTHDN
perms *
help Lists the top downloaders this month
input all
output source
}

wkup {
plugin org.drftpd.commands.transferstatistics
class TransferStatistics
method doSITE_WKUP
perms *
help Lists the top uploaders this week
input all
output source
}

wkdn {
plugin org.drftpd.commands.transferstatistics
class TransferStatistics
method doSITE_WKDN
perms *
help Lists the top downloaders this week
input all
output source
}

dayup {
plugin org.drftpd.commands.transferstatistics
class TransferStatistics
method doSITE_DAYUP
perms *
help Lists the top uploaders today
input all
output source
}

daydn {
plugin org.drftpd.commands.transferstatistics
class TransferStatistics
method doSITE_DAYDN
perms *
help Lists the top downloaders today
input all
output source
}

credits {
plugin org.drftpd.commands.usermanagement
class UserManagementHandler
method doCredits
perms *
help Show available credits
input all
output source
}

new {
plugin org.drftpd.commands.newhandler
class New
method doNEW
perms *
help Will list newly uploaded directories.
help.specific ${command} - List the newest dirs in all sections.
help.specific ${command} <number> - List the <number> newest dirs in all sections.
help.specific ${command} <section> - List the newest dirs in <section>.
help.specific ${command} <section> <number> - List the <number> newest dirs in <section>.
# specify the default number of dirs to show
default 5
# specify the maximum number of dirs to show (overrides user input)
max 10
# specify the sections to exclude from output (space separated)
filtered_sections REQUESTS
input all
output source
}

invite {
plugin org.drftpd.plugins.sitebot
class commands.UserHandler
method doInvite
perms *
help Invite yourself into irc channels using the sitebot
help.specific ${command} <username> <password>
input private
output source
}

master-uptime {
plugin org.drftpd.commands.serverstatus
class ServerStatus
method doMasterUptime
perms =siteop
help Will show current master uptime
input all
output source
}

slave-uptime {
plugin org.drftpd.commands.serverstatus
class ServerStatus
method doSlaveUptime
perms =siteop
help Will show current slave uptime
help.specific ${command} <slave>
input all
output source
}

slaves-uptime {
plugin org.drftpd.commands.serverstatus
class ServerStatus
method doSlavesUptime
perms =siteop
help Will show current slaves uptime
input all
output source
}

status {
plugin org.drftpd.commands.serverstatus
class ServerStatus
method doStatus
perms =siteop
help Will show current status of the daemon
help.specific ${command} Usage:
help.specific ${command} <os,vm,memory,threads,gc,all>
help.specific ${command} OS - Will show Operational System Info
help.specific ${command} VM - Will show VM Info.
help.specific ${command} MEMORY - Will show Memory Info.
help.specific ${command} THREADS - Will show Threads Info.
help.specific ${command} GC - Will show Garbage Collector Info.
help.specific ${command} CLASSES - Will show Classes Info.
help.specific ${command} ALL - shortcut to display ALL Info.
input all
output source
}

reload {
plugin org.drftpd.commands.sitemanagement
class SiteManagementHandler
method doSITE_RELOAD
perms =siteop
help Reload the config files
help.specific ${command}
help.specific Reload the config files
input all
output source
}

shutdown {
plugin org.drftpd.commands.sitemanagement
class SiteManagementHandler
method doSITE_SHUTDOWN
perms =siteop
help Shutdown the ftp server
help.specific ${command}
help.specific Shutdown the ftp server
input all
output source
}

help {
plugin org.drftpd.commands.misc
class Misc
method doSITE_HELP
perms *
help duh! it does this dummy!
help.specific ${command} <command> will display specific information on that command
input all
output source
}

time {
plugin org.drftpd.commands.misc
class Misc
method doSITE_TIME
perms *
help Show current server time
help.specific ${command}
help.specific Show current server time
input all
output source
}

version {
plugin org.drftpd.commands.misc
class Misc
method doSITE_VERS
perms *
help Show drftpd version
help.specific ${command}
help.specific Show drftpd version
input all
output source
}

abort {
plugin org.drftpd.commands.misc
class Misc
method doABOR
perms *
help Abort all commands being run by the user issuing the abort
input all
output source
}

remergequeue {
plugin org.drftpd.commands.slavemanagement
class SlaveManagement
method doRemergequeue
perms =siteop
help displays remergeque status
input public
output source
}

approve {
plugin org.drftpd.commands.approve
class ApproveCommands
method doSITE_APPROVE
perms =siteop
help Approve release even though rules say it should get nuked
help.specific ${command} [path]
input all
output source
}

remapprove {
plugin org.drftpd.commands.approve
class ApproveCommands
method doSITE_REMAPPROVE
perms =siteop
help Removes Approval of release
help.specific ${command} [path]
input all
output source
}

nuke {
plugin org.drftpd.commands.nuke
class Nuke
method doSITE_NUKE
perms =nuke =siteop
search true
help Nuke a directory.
help.specific ${command} <directory> <multiplier> <message>
input all
output source
}

unnuke {
plugin org.drftpd.commands.nuke
class Nuke
method doSITE_UNNUKE
perms =nuke =siteop
search true
help Unnuke a directory.
help.specific ${command} <directory>
input all
output source
}

nukes {
plugin org.drftpd.commands.nuke
class Nuke
method doSITE_NUKES
perms *
help List all nuked directories.
help.specific ${command} [section]
input all
output source
}

nukesclean {
plugin org.drftpd.commands.nuke
class Nuke
method doSITE_NUKESCLEAN
perms =nuke =siteop
help Clear nukelog of all invalid nukes.
help.specific ${command}
input all
output source
}

request {
plugin org.drftpd.commands.request
class Request
method doSITE_REQUEST
perms *
help Add a request
help.specific ${command} <nameofrequest>
input all
output source
}

requests {
plugin org.drftpd.commands.request
class Request
method doSITE_REQUESTS
perms *
help List current requests
input all
output source
}

reqfilled {
plugin org.drftpd.commands.request
class Request
method doSITE_REQFILLED
perms *
help Fill a request
help.specific ${command} <nameofrequest>
input all
output source
}

reqdel {
plugin org.drftpd.commands.request
class Request
method doSITE_REQDELETE
perms =request
help Deletes a request
help.specific ${command} <nameofrequest>
input all
output source

# you can only delete your own without deleteOthers
request.deleteOthers =siteop
}

top {
plugin org.drftpd.plugins.trialmanager
class TrialManagerCommands
method doTOP
perms *
help Lists All Users In Trial Period
help.specific ${command} <num>
input all
output source
}

cut {
plugin org.drftpd.plugins.trialmanager
class TrialManagerCommands
method doCUT
perms *
help Lists All Cut Users In Trial Period
help.specific ${command} <num>
input all
output source
}

passed {
plugin org.drftpd.plugins.trialmanager
class TrialManagerCommands
method doPASSED
perms *
help Lists If User Has Passed Trial
help.specific ${command} <User>
input all
output source
}

rescan {
plugin org.drftpd.commands.zipscript
class ZipscriptCommands
method doSITE_RESCAN
perms *
help sfv scans the files in the current directory or a specific directory requested.
help.specific ${command} [-r] [force] [delete] [quiet] [path]
help.specific     The -r option recursively scans all directories below the current directory as well.
help.specific     The noforce option makes the slave recalculate the checksums.
help.specific     The nodelete option removes bad files rather than just reporting them.
help.specific     The nodelete0byte option removes any files listed in the SFV which exist but are 0 byte.
help.specific     The quiet option only prints output for files which aren't good.
help.specific     Specifying a path will rescan the requested directory instead of the current directory.
input all
output source
}

gpassed {
plugin org.drftpd.plugins.trialmanager
class TrialManagerCommands
method doPASSED
perms %
help Lists If Group Has Passed Trial
help.specific ${command} <Group>
input public
output source
}

gtop {
plugin org.drftpd.plugins.trialmanager
class TrialManagerCommands
method doTOP
perms *
help Lists All Users In Trial Period
help.specific ${command} <num>
input all
output source
}
